@name Sign
@inputs 
@outputs SetText:string
@persist [CurrentTextLength,Spacing]:number [SpecialCharacters,LowerCaseCharacters,SlimLetters]:string [SpecialCharacterModelPath]:array
@trigger 
function void newFloatingText(S:string,From:number)
{
    for(I=From,S:length())
    {
        if(S[I]!=" ")
        {
            
            holoCreate(I,entity():pos()+vec(55*I,0,0),vec(5,1,5),ang(0,180,0),vec(255,255,255))
            #Spacing = SlimLetters:find(S[I]) ? Spacing+6 : Spacing+13   
            #holoCreate(I,entity():pos()+vec(Spacing,0,0),vec(1,1,1),ang(0,180,0),vec(255,255,255))
            Lower = LowerCaseCharacters:find(S[I])
            Spec = SpecialCharacters:find(S[I])
            if(Lower){HoloString = "models/sprops/misc/alphanum/alphanum_l_"+S[I]:lower()+".mdl"}
            elseif(Spec){HoloString = SpecialCharacterModelPath[Spec,string]}
            else{HoloString = "models/sprops/misc/alphanum/alphanum_"+S[I]:lower()+".mdl"}
            #HoloString = Spec ?  : "models/sprops/misc/alphanum/alphanum_"+S[I]:lower()+".mdl"
            holoModel(I,HoloString)
            holoMaterial(I,"engine/singlecolor")
            holoParent(I,entity())  
            
        }
        else{Spacing +=13}
    }
}
if(clk("deleteHolos"))
{
    for(I=20,CurrentTextLength)
    {
        holoDelete(I)
    }
}
elseif(clk("refreshText"))
{
    #newFloatingText(SetText,1)
    newFloatingText(hostname(),20)
    CurrentTextLength = hostname():length()
    timer("deleteHolos",9500)
    timer("refreshText",10000)
}
if(first())
{
    Spacing = 0
    SpecialCharacters = ",#-.'?!%/_:+<>()="
    SpecialCharacterModelPath = array("models/sprops/misc/alphanum/alphanum_com.mdl",
                                      "models/sprops/misc/alphanum/alphanum_pdsign.mdl",
                                      "models/sprops/misc/alphanum/alphanum_min.mdl",
                                      "models/sprops/misc/alphanum/alphanum_prd.mdl",
                                      "models/sprops/misc/alphanum/alphanum_apost.mdl",
                                      "models/sprops/misc/alphanum/alphanum_qmark.mdl",
                                      "models/sprops/misc/alphanum/alphanum_xmark.mdl",
                                      "models/sprops/misc/alphanum/alphanum_pcnt.mdl",
                                      "models/sprops/misc/alphanum/alphanum_div.mdl",
                                      "models/sprops/misc/alphanum/alphanum_underscore.mdl",
                                      "models/sprops/misc/alphanum/alphanum_colon.mdl",
                                      "models/sprops/misc/alphanum/alphanum_plu.mdl",
                                      "models/sprops/misc/alphanum/alphanum_lessthan.mdl",
                                      "models/sprops/misc/alphanum/alphanum_greaterthan.mdl",
                                      "models/sprops/misc/alphanum/alphanum_lpar.mdl",
                                      "models/sprops/misc/alphanum/alphanum_rpar.mdl",
                                      "models/sprops/misc/alphanum/alphanum_equal.mdl")
    LowerCaseCharacters = "abcdefghijklmnopqrstuvwxyz"
    SlimLetters = "il!t"
    timer("deleteHolos",9800)
    timer("refreshText",10000)
    #newFloatingText("Happy New Year! :DDD",1)
    #newFloatingText("Why spam music?",1)
    #newFloatingText("BINGUS",1)
    String = "Meta Construct EU - "
    CurrentTextLength = String:length()
    #CurrentTextLength = hostname():length()
    #newFloatingText(hostname(),1)
    newFloatingText(String,1)
    #newFloatingText("FREE V BUCKS",1)
}
#runOnChat(1)
#[if(chatClk())
{
    LastSaid = lastSaid()
    LastSaidExploded = LastSaid:explode(" ")
    if(LastSaidExploded[1,string] == "!setsign")
    {
        SetText = LastSaid:sub(9)
        timer("refreshText",1000)
    for(I=1,CurrentTextLength)
    {
        holoDelete(I)
    }
    }
}]#
runOnChat(1)
