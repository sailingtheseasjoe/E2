@name GaySnake
@persist [I,J]:number Time:number [PrevGay,TargetGay]:entity BodyPartsPos:array EntityPos:vector Text:string
@trigger 
function void newFloatingText(S:string)
{
    Text = S
    for(I=1,S:length())
    {
        #This is a for-loop. I use this to go through the characters of the input text, and assign a new hologram model to it.
        #First you have to give a variable, in this case "I" an initial value. I gave it 1
        #The code below will repeat, and each time it repeats, it adds +1 to your variable "I"
        #If "I" reaches the end value, which is S:length() in this case (How many characters are in your input text), the it will exit the loop.
        if(S[I]!=" ") #We check if the character is not a space. We don't need a hologram for that.
        {
            holoCreate(I,entity():pos()+vec(-12*I,0,0),vec(1,1,1),ang(0,0,0))
            HoloString = "models/sprops/misc/alphanum/alphanum_"+S[I]+".mdl"
            #print(HoloString)
            holoModel(I,HoloString)
            if(S[I] == ",")
            {
                holoModel(I,"models/sprops/misc/alphanum/alphanum_com.mdl")
            }
        }
    }
}
if(first() || duped())
{
    newFloatingText("Pythong")
}
function void findNearestPlayer()
{
    findByClass("player")
    PrevGay = TargetGay
    TargetGay = findClosest(entity():pos())
    if(PrevGay != TargetGay)
    {
        holoDeleteAll()
        timer("newText",200)
    }
}


HeadHoloPos = entity():pos()+vec(-12,0,sin(Time*20-20)*50+55)
if(EntityPos != entity():pos())
{
        holoPos(1,HeadHoloPos)
        holoColor(1,vec(sin(Time*20-30)*255,sin((Time*20-30)-20)*255,sin((Time*20-30)-30)*255)) #I was drunk when I wrote this mess. Don't ask how I got this formula xD
    BodyPartsPos:unshiftVector(HeadHoloPos)
    if(BodyPartsPos:count()>Text:length()){BodyPartsPos:pop()}
    for(I=2,Text:length())
    {
        holoPos(I,BodyPartsPos[I,vector]+vec(I*-12,0,0))
        holoColor(I,vec(sin(Time*20-30*I)*255,sin((Time*20-30*I)-20)*255,sin((Time*20-30*I)-30)*255))
    }
    Time++
    }
interval(100)
#[EntityPos = entity():pos()
findByClass("player")
ClosestPlayer = findClosest(entity():pos())
entity():applyForce((ClosestPlayer:pos()-entity():pos())/10)]#
