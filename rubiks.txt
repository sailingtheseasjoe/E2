@name Rubiks h
@inputs EntityMarker:array [Upper,UpperInverted,Down,DownInverted,Right,RightInverted,Left,LeftInverted,Front,FrontInverted,Back,BackInverted]:number
@outputs UpperAngle:number HoloIDPositions:array [PreviousMove,Status]:string
@persist CubeMassCenter:vector CubeSideCenterHoloID:array AlphaFUCK:number  [UpperHolos,RightHolos,DownHolos,LeftHolos,FrontHolos,BackHolos,Moves]:array [DownAngle,RightAngle,LeftAngle,FrontAngle,BackAngle]:number 
@trigger 
@strict
function void initiateMove(Move:string)
{
    soundPlay(1,0,"acf_extra/vehiclefx/trans/default_shift.wav")
    Status = Move
    PreviousMove = Move
    switch(Move)
    {
        case "Upper",
            
            for(I=1,UpperHolos:count())
            {
                holoUnparent(HoloIDPositions[UpperHolos[I,number],number])
                holoParent(HoloIDPositions[UpperHolos[I,number],number],41)
            }
        break
        case "UpperInverted",
            for(I=1,UpperHolos:count())
            {
                holoUnparent(HoloIDPositions[UpperHolos[I,number],number])
                holoParent(HoloIDPositions[UpperHolos[I,number],number],41)
            }
        break
        case "Right",
            for(I=1,RightHolos:count())
            {
                holoUnparent(HoloIDPositions[RightHolos[I,number],number])
                holoParent(HoloIDPositions[RightHolos[I,number],number],23)
            }
        break
        case "RightInverted",
            for(I=1,RightHolos:count())
            {
                holoUnparent(HoloIDPositions[RightHolos[I,number],number])
                holoParent(HoloIDPositions[RightHolos[I,number],number],23)
            }
        break
        case "Down",
            for(I=1,DownHolos:count())
            {
                holoUnparent(HoloIDPositions[DownHolos[I,number],number])
                holoParent(HoloIDPositions[DownHolos[I,number],number],50)
            }
        break
        case "DownInverted",
            for(I=1,DownHolos:count())
            {
                holoUnparent(HoloIDPositions[DownHolos[I,number],number])
                holoParent(HoloIDPositions[DownHolos[I,number],number],50)
            }
        break
        case "Left",
            for(I=1,LeftHolos:count())
            {
                holoUnparent(HoloIDPositions[LeftHolos[I,number],number])
                holoParent(HoloIDPositions[LeftHolos[I,number],number],5)
            }
        break
        case "LeftInverted",
            for(I=1,LeftHolos:count())
            {
                holoUnparent(HoloIDPositions[LeftHolos[I,number],number])
                holoParent(HoloIDPositions[LeftHolos[I,number],number],5)
            }
        break
        case "Front",
            for(I=1,FrontHolos:count())
            {
                holoUnparent(HoloIDPositions[FrontHolos[I,number],number])
                holoParent(HoloIDPositions[FrontHolos[I,number],number],32)
            }
        break
        case "FrontInverted",
            for(I=1,FrontHolos:count())
            {
                holoUnparent(HoloIDPositions[FrontHolos[I,number],number])
                holoParent(HoloIDPositions[FrontHolos[I,number],number],32)
            }
        break
        case "Back",
            for(I=1,BackHolos:count())
            {
                holoUnparent(HoloIDPositions[BackHolos[I,number],number])
                holoParent(HoloIDPositions[BackHolos[I,number],number],14)
            }
        break
        case "BackInverted",
            for(I=1,BackHolos:count())
            {
                holoUnparent(HoloIDPositions[BackHolos[I,number],number])
                holoParent(HoloIDPositions[BackHolos[I,number],number],14)
            }
        break
    }
}
if(first() || duped())
{
    Status = "Idle"
    Moves = array("Upper","Right","Down","Left","Front","Back")
    AlphaNumModels = "models/sprops/misc/alphanum/alphanum_"
    AlphaFUCK = 0
    CubeSideCenterHoloID = array()
    CubeMassCenter = entity():pos()+vec(100,100,100)
    Colors = array(vec(255,0,0),vec(0,255,0),vec(0,0,255),vec(255,255,0),vec(255,255,255),vec(0,255,255))
    #TileSize = EntityMarker[1,entity]:aabbSize():x()*1.5
    TileSize = 12
    #TileModel = EntityMarker[1,entity]:model()
    TileModel = "models/hunter/blocks/cube025x025x025.mdl"
    #TileModel = "models/sprops/misc/alphanum/alphanum_l_h.mdl"
    UpperHolos = array(1,2,3,10,11,12,19,20,21,28,29,30,37,38,39,40,42,43,44,45)
    RightHolos = array(30,33,36,45,44,43,16,13,10,54,53,52,19,20,21,22,24,25,26,27)
    DownHolos = array(34,35,36,25,26,27,16,17,18,7,8,9,46,47,48,49,51,52,53,54)
    LeftHolos = array(28,31,34,46,47,48,18,15,12,39,38,37,1,2,3,4,6,7,8,9)
    FrontHolos = array(37,40,43,19,22,25,52,49,46,3,6,9,28,29,30,31,33,34,35,36)
    BackHolos = array(39,42,45,21,24,27,54,51,48,7,4,1,12,11,10,15,13,18,17,16)
    N=0
    UpperAngle = 0
    DownAngle = 0
    RightAngle = 0
    LeftAngle = 0
    FrontAngle = 0
    BackAngle = 0
    holoCreate(255,CubeMassCenter)
    DistanceFromCenter = 1.2
    ##RED SIDE##
    M=0
    for(I=-1,1)
    {
        for(J=-1,1)
        {
            M+=1
            N+=1
            holoCreate(N,CubeMassCenter+vec(-TileSize*J,TileSize*DistanceFromCenter,-TileSize*I),vec(1,1,1),ang(0,0,0))
            holoModel(N,TileModel)
            #holoModel(N,AlphaNumModels+toString(M)+".mdl")
            holoColor(N, Colors[1,vector])
        }
    }
    CubeSideCenterHoloID:pushNumber(N-4)
    ##GREEN SIDE##
    M=0
    for(I=-1,1)
    {
        for(J=-1,1)
        {
            M+=1
            N+=1
            holoCreate(N,CubeMassCenter+vec(TileSize*DistanceFromCenter,TileSize*J,-TileSize*I),vec(1,1,1),ang(0,-90,0))
            holoModel(N,TileModel)
            #holoModel(N,AlphaNumModels+toString(M)+".mdl")
            holoColor(N, Colors[2,vector])
        }
    }
    ##BLUE SIDE##
    M=0
    CubeSideCenterHoloID:pushNumber(N-4)
    for(I=-1,1)
    {
        for(J=-1,1)
        {
            M+=1
            N+=1
            holoCreate(N,CubeMassCenter-vec(-TileSize*J,TileSize*DistanceFromCenter,TileSize*I),vec(1,1,1),ang(0,-180,0))
            holoModel(N,TileModel)
            #holoModel(N,AlphaNumModels+toString(M)+".mdl")
            holoColor(N, Colors[3,vector])
        }
    }
    ##YELLOW SIDE##
    M=0
    CubeSideCenterHoloID:pushNumber(N-4)
    for(I=-1,1)
    {
        for(J=-1,1)
        {
            M+=1
            N+=1
            holoCreate(N,CubeMassCenter-vec(TileSize*DistanceFromCenter,TileSize*J,TileSize*I),vec(1,1,1),ang(0,90,0))
            holoModel(N,TileModel)
            #holoModel(N,AlphaNumModels+toString(M)+".mdl")
            holoColor(N, Colors[4,vector])
        }
    }
    ##WHITE SIDE###
    M=0
    CubeSideCenterHoloID:pushNumber(N-4)
    UpperAngle = 0
    for(I=-1,1)
    {
        for(J=-1,1)
        {
            M+=1
            N+=1
            holoCreate(N,CubeMassCenter+vec(TileSize*J,-TileSize*I,TileSize*DistanceFromCenter),vec(1,1,1),ang(-180,UpperAngle,-90))
            holoModel(N,TileModel)
            #holoModel(N,AlphaNumModels+toString(M)+".mdl")
            holoColor(N, Colors[5,vector])
        }
    }
    CubeSideCenterHoloID:pushNumber(N-4)
    M=0
    ##TEAL SIDE##
    for(I=-1,1)
    {
        for(J=-1,1)
        {
            N+=1
            M+=1
            holoCreate(N,CubeMassCenter+vec(TileSize*J,-TileSize*I,-TileSize*DistanceFromCenter),vec(1,1,1),ang(-180,0,-90))
            holoModel(N,TileModel)
            #holoModel(N,AlphaNumModels+toString(M)+".mdl")
            holoColor(N, Colors[6,vector])
        }
    }
    CubeSideCenterHoloID:pushNumber(N-4)
    HoloIDPositions = array()
    for(I=1,54){HoloIDPositions:pushNumber(I)}
}
switch(Status)
{
    case "Upper",
        UpperAngle -= 5
        holoAng(41,ang(-180,0,-90)+ang(0,UpperAngle,0))
        if(mod(UpperAngle,90) != 0)
        {
            runOnTick(1)
        }
        else{
            Status = "Idle"
            Swap = HoloIDPositions[28,number]
            HoloIDPositions[28,number] = HoloIDPositions[19,number]
            HoloIDPositions[19,number] = HoloIDPositions[10,number]
            HoloIDPositions[10,number] = HoloIDPositions[1,number]
            HoloIDPositions[1,number] = Swap
            Swap = HoloIDPositions[2,number]
            HoloIDPositions[2,number] = HoloIDPositions[29,number]
            HoloIDPositions[29,number] = HoloIDPositions[20,number]
            HoloIDPositions[20,number] = HoloIDPositions[11,number]
            HoloIDPositions[11,number] = Swap
            Swap = HoloIDPositions[3,number]
            HoloIDPositions[3,number] = HoloIDPositions[30,number]
            HoloIDPositions[30,number] = HoloIDPositions[21,number]
            HoloIDPositions[21,number] = HoloIDPositions[12,number]
            HoloIDPositions[12,number] = Swap
            Swap = HoloIDPositions[37,number]
            HoloIDPositions[37,number] = HoloIDPositions[43,number]
            HoloIDPositions[43,number] = HoloIDPositions[45,number]
            HoloIDPositions[45,number] = HoloIDPositions[39,number]
            HoloIDPositions[39,number] = Swap
            Swap = HoloIDPositions[38,number]
            HoloIDPositions[38,number] = HoloIDPositions[40,number]
            HoloIDPositions[40,number] = HoloIDPositions[44,number]
            HoloIDPositions[44,number] = HoloIDPositions[42,number]
            HoloIDPositions[42,number] = Swap
            runOnTick(0)
            }
        
        break
    case "UpperInverted",
        UpperAngle += 5
        holoAng(41,ang(-180,0,-90)+ang(0,UpperAngle,0))
        if(mod(UpperAngle,90) != 0)
        {
            runOnTick(1)
        }
        else{
            Status = "Idle"
            Swap = HoloIDPositions[28,number]
            HoloIDPositions[28,number] = HoloIDPositions[1,number]
            HoloIDPositions[1,number] = HoloIDPositions[10,number]
            HoloIDPositions[10,number] = HoloIDPositions[19,number]
            HoloIDPositions[19,number] = Swap
            Swap = HoloIDPositions[2,number]
            HoloIDPositions[2,number] = HoloIDPositions[11,number]
            HoloIDPositions[11,number] = HoloIDPositions[20,number]
            HoloIDPositions[20,number] = HoloIDPositions[29,number]
            HoloIDPositions[29,number] = Swap
            Swap = HoloIDPositions[3,number]
            HoloIDPositions[3,number] = HoloIDPositions[12,number]
            HoloIDPositions[12,number] = HoloIDPositions[21,number]
            HoloIDPositions[21,number] = HoloIDPositions[30,number]
            HoloIDPositions[30,number] = Swap
            Swap = HoloIDPositions[37,number]
            HoloIDPositions[37,number] = HoloIDPositions[39,number]
            HoloIDPositions[39,number] = HoloIDPositions[45,number]
            HoloIDPositions[45,number] = HoloIDPositions[43,number]
            HoloIDPositions[43,number] = Swap
            Swap = HoloIDPositions[38,number]
            HoloIDPositions[38,number] = HoloIDPositions[42,number]
            HoloIDPositions[42,number] = HoloIDPositions[44,number]
            HoloIDPositions[44,number] = HoloIDPositions[40,number]
            HoloIDPositions[40,number] = Swap
            runOnTick(0)
            }
        
        break
    case "Right",
        RightAngle -= 5
        holoAng(23,ang(0,-180,0)+ang(RightAngle,0,0))
        if(mod(RightAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[45,number]
            HoloIDPositions[45,number] = HoloIDPositions[30,number]
            HoloIDPositions[30,number] = HoloIDPositions[52,number]
            HoloIDPositions[52,number] = HoloIDPositions[16,number]
            HoloIDPositions[16,number] = Swap
            Swap = HoloIDPositions[44,number]
            HoloIDPositions[44,number] = HoloIDPositions[33,number]
            HoloIDPositions[33,number] = HoloIDPositions[53,number]
            HoloIDPositions[53,number] = HoloIDPositions[13,number]
            HoloIDPositions[13,number] = Swap
            Swap = HoloIDPositions[43,number]
            HoloIDPositions[43,number] = HoloIDPositions[36,number]
            HoloIDPositions[36,number] = HoloIDPositions[54,number]
            HoloIDPositions[54,number] = HoloIDPositions[10,number]
            HoloIDPositions[10,number] = Swap
            Swap = HoloIDPositions[21,number]
            HoloIDPositions[21,number] = HoloIDPositions[19,number]
            HoloIDPositions[19,number] = HoloIDPositions[25,number]
            HoloIDPositions[25,number] = HoloIDPositions[27,number]
            HoloIDPositions[27,number] = Swap
            Swap = HoloIDPositions[24,number]
            HoloIDPositions[24,number] = HoloIDPositions[20,number]
            HoloIDPositions[20,number] = HoloIDPositions[22,number]
            HoloIDPositions[22,number] = HoloIDPositions[26,number]
            HoloIDPositions[26,number] = Swap
            runOnTick(0)
        }
        break
    case "RightInverted",
        RightAngle += 5
        holoAng(23,ang(0,-180,0)+ang(RightAngle,0,0))
        if(mod(RightAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[45,number]
            HoloIDPositions[45,number] = HoloIDPositions[16,number]
            HoloIDPositions[16,number] = HoloIDPositions[52,number]
            HoloIDPositions[52,number] = HoloIDPositions[30,number]
            HoloIDPositions[30,number] = Swap
            Swap = HoloIDPositions[44,number]
            HoloIDPositions[44,number] = HoloIDPositions[13,number]
            HoloIDPositions[13,number] = HoloIDPositions[53,number]
            HoloIDPositions[53,number] = HoloIDPositions[33,number]
            HoloIDPositions[33,number] = Swap
            Swap = HoloIDPositions[43,number]
            HoloIDPositions[43,number] = HoloIDPositions[10,number]
            HoloIDPositions[10,number] = HoloIDPositions[54,number]
            HoloIDPositions[54,number] = HoloIDPositions[36,number]
            HoloIDPositions[36,number] = Swap
            Swap = HoloIDPositions[21,number]
            HoloIDPositions[21,number] = HoloIDPositions[27,number]
            HoloIDPositions[27,number] = HoloIDPositions[25,number]
            HoloIDPositions[25,number] = HoloIDPositions[19,number]
            HoloIDPositions[19,number] = Swap
            Swap = HoloIDPositions[24,number]
            HoloIDPositions[24,number] = HoloIDPositions[26,number]
            HoloIDPositions[26,number] = HoloIDPositions[22,number]
            HoloIDPositions[22,number] = HoloIDPositions[20,number]
            HoloIDPositions[20,number] = Swap
            runOnTick(0)
        }
        break
    case "Down",
        DownAngle += 5
        holoAng(50,ang(-180,0,-90)+ang(0,DownAngle,0))
        if(mod(DownAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[25,number]
            HoloIDPositions[25,number] = HoloIDPositions[34,number]
            HoloIDPositions[34,number] = HoloIDPositions[7,number]
            HoloIDPositions[7,number] = HoloIDPositions[16,number]
            HoloIDPositions[16,number] = Swap
            Swap = HoloIDPositions[26,number]
            HoloIDPositions[26,number] = HoloIDPositions[35,number]
            HoloIDPositions[35,number] = HoloIDPositions[8,number]
            HoloIDPositions[8,number] = HoloIDPositions[17,number]
            HoloIDPositions[17,number] = Swap
            Swap = HoloIDPositions[27,number]
            HoloIDPositions[27,number] = HoloIDPositions[36,number]
            HoloIDPositions[36,number] = HoloIDPositions[9,number]
            HoloIDPositions[9,number] = HoloIDPositions[18,number]
            HoloIDPositions[18,number] = Swap
            Swap = HoloIDPositions[54,number]
            HoloIDPositions[54,number] = HoloIDPositions[52,number]
            HoloIDPositions[52,number] = HoloIDPositions[46,number]
            HoloIDPositions[46,number] = HoloIDPositions[48,number]
            HoloIDPositions[48,number] = Swap
            Swap = HoloIDPositions[53,number]
            HoloIDPositions[53,number] = HoloIDPositions[49,number]
            HoloIDPositions[49,number] = HoloIDPositions[47,number]
            HoloIDPositions[47,number] = HoloIDPositions[51,number]
            HoloIDPositions[51,number] = Swap
            runOnTick(0)
        }
        break
    case "DownInverted",
        DownAngle -= 5
        holoAng(50,ang(-180,0,-90)+ang(0,DownAngle,0))
        if(mod(DownAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[25,number]
            HoloIDPositions[25,number] = HoloIDPositions[16,number]
            HoloIDPositions[16,number] = HoloIDPositions[7,number]
            HoloIDPositions[7,number] = HoloIDPositions[34,number]
            HoloIDPositions[34,number] = Swap
            Swap = HoloIDPositions[26,number]
            HoloIDPositions[26,number] = HoloIDPositions[17,number]
            HoloIDPositions[17,number] = HoloIDPositions[8,number]
            HoloIDPositions[8,number] = HoloIDPositions[35,number]
            HoloIDPositions[35,number] = Swap
            Swap = HoloIDPositions[27,number]
            HoloIDPositions[27,number] = HoloIDPositions[18,number]
            HoloIDPositions[18,number] = HoloIDPositions[9,number]
            HoloIDPositions[9,number] = HoloIDPositions[36,number]
            HoloIDPositions[36,number] = Swap
            Swap = HoloIDPositions[54,number]
            HoloIDPositions[54,number] = HoloIDPositions[48,number]
            HoloIDPositions[48,number] = HoloIDPositions[46,number]
            HoloIDPositions[46,number] = HoloIDPositions[52,number]
            HoloIDPositions[52,number] = Swap
            Swap = HoloIDPositions[53,number]
            HoloIDPositions[53,number] = HoloIDPositions[51,number]
            HoloIDPositions[51,number] = HoloIDPositions[47,number]
            HoloIDPositions[47,number] = HoloIDPositions[49,number]
            HoloIDPositions[49,number] = Swap
            runOnTick(0)
        }
        break
    case "Left",
        LeftAngle -= 5
        holoAng(5,ang(0,0,0)+ang(LeftAngle,0,0))
        if(mod(LeftAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[34,number]
            HoloIDPositions[34,number] = HoloIDPositions[37,number]
            HoloIDPositions[37,number] = HoloIDPositions[12,number]
            HoloIDPositions[12,number] = HoloIDPositions[48,number]
            HoloIDPositions[48,number] = Swap
            Swap = HoloIDPositions[31,number]
            HoloIDPositions[31,number] = HoloIDPositions[38,number]
            HoloIDPositions[38,number] = HoloIDPositions[15,number]
            HoloIDPositions[15,number] = HoloIDPositions[47,number]
            HoloIDPositions[47,number] = Swap
            Swap = HoloIDPositions[28,number]
            HoloIDPositions[28,number] = HoloIDPositions[39,number]
            HoloIDPositions[39,number] = HoloIDPositions[18,number]
            HoloIDPositions[18,number] = HoloIDPositions[46,number]
            HoloIDPositions[46,number] = Swap
            Swap = HoloIDPositions[9,number]
            HoloIDPositions[9,number] = HoloIDPositions[3,number]
            HoloIDPositions[3,number] = HoloIDPositions[1,number]
            HoloIDPositions[1,number] = HoloIDPositions[7,number]
            HoloIDPositions[7,number] = Swap
            Swap = HoloIDPositions[6,number]
            HoloIDPositions[6,number] = HoloIDPositions[2,number]
            HoloIDPositions[2,number] = HoloIDPositions[4,number]
            HoloIDPositions[4,number] = HoloIDPositions[8,number]
            HoloIDPositions[8,number] = Swap
            runOnTick(0)
        }
        break
    case "LeftInverted",
        LeftAngle += 5
        holoAng(5,ang(0,0,0)+ang(LeftAngle,0,0))
        if(mod(LeftAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[34,number]
            HoloIDPositions[34,number] = HoloIDPositions[48,number]
            HoloIDPositions[48,number] = HoloIDPositions[12,number]
            HoloIDPositions[12,number] = HoloIDPositions[37,number]
            HoloIDPositions[37,number] = Swap
            Swap = HoloIDPositions[31,number]
            HoloIDPositions[31,number] = HoloIDPositions[47,number]
            HoloIDPositions[47,number] = HoloIDPositions[15,number]
            HoloIDPositions[15,number] = HoloIDPositions[38,number]
            HoloIDPositions[38,number] = Swap
            Swap = HoloIDPositions[28,number]
            HoloIDPositions[28,number] = HoloIDPositions[46,number]
            HoloIDPositions[46,number] = HoloIDPositions[18,number]
            HoloIDPositions[18,number] = HoloIDPositions[39,number]
            HoloIDPositions[39,number] = Swap
            Swap = HoloIDPositions[9,number]
            HoloIDPositions[9,number] = HoloIDPositions[7,number]
            HoloIDPositions[7,number] = HoloIDPositions[1,number]
            HoloIDPositions[1,number] = HoloIDPositions[3,number]
            HoloIDPositions[3,number] = Swap
            Swap = HoloIDPositions[6,number]
            HoloIDPositions[6,number] = HoloIDPositions[8,number]
            HoloIDPositions[8,number] = HoloIDPositions[4,number]
            HoloIDPositions[4,number] = HoloIDPositions[2,number]
            HoloIDPositions[2,number] = Swap
            runOnTick(0)
        }
        break
    case "Front",
        FrontAngle -= 5
        holoAng(32,ang(0,90,0)+ang(FrontAngle,0,0))
        if(mod(FrontAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[19,number]
            HoloIDPositions[19,number] = HoloIDPositions[37,number]
            HoloIDPositions[37,number] = HoloIDPositions[9,number]
            HoloIDPositions[9,number] = HoloIDPositions[52,number]
            HoloIDPositions[52,number] = Swap
            Swap = HoloIDPositions[22,number]
            HoloIDPositions[22,number] = HoloIDPositions[40,number]
            HoloIDPositions[40,number] = HoloIDPositions[6,number]
            HoloIDPositions[6,number] = HoloIDPositions[49,number]
            HoloIDPositions[49,number] = Swap
            Swap = HoloIDPositions[25,number]
            HoloIDPositions[25,number] = HoloIDPositions[43,number]
            HoloIDPositions[43,number] = HoloIDPositions[3,number]
            HoloIDPositions[3,number] = HoloIDPositions[46,number]
            HoloIDPositions[46,number] = Swap
            Swap = HoloIDPositions[30,number]
            HoloIDPositions[30,number] = HoloIDPositions[28,number]
            HoloIDPositions[28,number] = HoloIDPositions[34,number]
            HoloIDPositions[34,number] = HoloIDPositions[36,number]
            HoloIDPositions[36,number] = Swap
            Swap = HoloIDPositions[33,number]
            HoloIDPositions[33,number] = HoloIDPositions[29,number]
            HoloIDPositions[29,number] = HoloIDPositions[31,number]
            HoloIDPositions[31,number] = HoloIDPositions[35,number]
            HoloIDPositions[35,number] = Swap
            runOnTick(0)
        }
        break
        case "FrontInverted",
        FrontAngle += 5
        holoAng(32,ang(0,90,0)+ang(FrontAngle,0,0))
        if(mod(FrontAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[19,number]
            HoloIDPositions[19,number] = HoloIDPositions[52,number]
            HoloIDPositions[52,number] = HoloIDPositions[9,number]
            HoloIDPositions[9,number] = HoloIDPositions[37,number]
            HoloIDPositions[37,number] = Swap
            Swap = HoloIDPositions[22,number]
            HoloIDPositions[22,number] = HoloIDPositions[49,number]
            HoloIDPositions[49,number] = HoloIDPositions[6,number]
            HoloIDPositions[6,number] = HoloIDPositions[40,number]
            HoloIDPositions[40,number] = Swap
            Swap = HoloIDPositions[25,number]
            HoloIDPositions[25,number] = HoloIDPositions[46,number]
            HoloIDPositions[46,number] = HoloIDPositions[3,number]
            HoloIDPositions[3,number] = HoloIDPositions[43,number]
            HoloIDPositions[43,number] = Swap
            Swap = HoloIDPositions[30,number]
            HoloIDPositions[30,number] = HoloIDPositions[36,number]
            HoloIDPositions[36,number] = HoloIDPositions[34,number]
            HoloIDPositions[34,number] = HoloIDPositions[28,number]
            HoloIDPositions[28,number] = Swap
            Swap = HoloIDPositions[33,number]
            HoloIDPositions[33,number] = HoloIDPositions[35,number]
            HoloIDPositions[35,number] = HoloIDPositions[31,number]
            HoloIDPositions[31,number] = HoloIDPositions[29,number]
            HoloIDPositions[29,number] = Swap
            runOnTick(0)
        }
        break
        case "Back",
        BackAngle -= 5
        holoAng(14,ang(0,-90,0)+ang(BackAngle,0,0))
        if(mod(BackAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[45,number]
            HoloIDPositions[45,number] = HoloIDPositions[27,number]
            HoloIDPositions[27,number] = HoloIDPositions[48,number]
            HoloIDPositions[48,number] = HoloIDPositions[1,number]
            HoloIDPositions[1,number] = Swap
            Swap = HoloIDPositions[4,number]
            HoloIDPositions[4,number] = HoloIDPositions[42,number]
            HoloIDPositions[42,number] = HoloIDPositions[24,number]
            HoloIDPositions[24,number] = HoloIDPositions[51,number]
            HoloIDPositions[51,number] = Swap
            Swap = HoloIDPositions[7,number]
            HoloIDPositions[7,number] = HoloIDPositions[39,number]
            HoloIDPositions[39,number] = HoloIDPositions[21,number]
            HoloIDPositions[21,number] = HoloIDPositions[54,number]
            HoloIDPositions[54,number] = Swap
            Swap = HoloIDPositions[12,number]
            HoloIDPositions[12,number] = HoloIDPositions[10,number]
            HoloIDPositions[10,number] = HoloIDPositions[16,number]
            HoloIDPositions[16,number] = HoloIDPositions[18,number]
            HoloIDPositions[18,number] = Swap
            Swap = HoloIDPositions[15,number]
            HoloIDPositions[15,number] = HoloIDPositions[11,number]
            HoloIDPositions[11,number] = HoloIDPositions[13,number]
            HoloIDPositions[13,number] = HoloIDPositions[17,number]
            HoloIDPositions[17,number] = Swap
            runOnTick(0)
        }
        break
        case "BackInverted",
        BackAngle += 5
        holoAng(14,ang(0,-90,0)+ang(BackAngle,0,0))
        if(mod(BackAngle,90) != 0)
        {
            runOnTick(1)
        }
        else
        {
            Status = "Idle"
            Swap = HoloIDPositions[45,number]
            HoloIDPositions[45,number] = HoloIDPositions[1,number]
            HoloIDPositions[1,number] = HoloIDPositions[48,number]
            HoloIDPositions[48,number] = HoloIDPositions[27,number]
            HoloIDPositions[27,number] = Swap
            Swap = HoloIDPositions[4,number]
            HoloIDPositions[4,number] = HoloIDPositions[51,number]
            HoloIDPositions[51,number] = HoloIDPositions[24,number]
            HoloIDPositions[24,number] = HoloIDPositions[42,number]
            HoloIDPositions[42,number] = Swap
            Swap = HoloIDPositions[7,number]
            HoloIDPositions[7,number] = HoloIDPositions[54,number]
            HoloIDPositions[54,number] = HoloIDPositions[21,number]
            HoloIDPositions[21,number] = HoloIDPositions[39,number]
            HoloIDPositions[39,number] = Swap
            Swap = HoloIDPositions[12,number]
            HoloIDPositions[12,number] = HoloIDPositions[18,number]
            HoloIDPositions[18,number] = HoloIDPositions[16,number]
            HoloIDPositions[16,number] = HoloIDPositions[10,number]
            HoloIDPositions[10,number] = Swap
            Swap = HoloIDPositions[15,number]
            HoloIDPositions[15,number] = HoloIDPositions[17,number]
            HoloIDPositions[17,number] = HoloIDPositions[13,number]
            HoloIDPositions[13,number] = HoloIDPositions[11,number]
            HoloIDPositions[11,number] = Swap
            runOnTick(0)
        }
        break
        
}
if      (Upper && Status == "Idle"){initiateMove("Upper")}
elseif  (UpperInverted && Status == "Idle"){initiateMove("UpperInverted")}
elseif  (Down && Status == "Idle"){initiateMove("Down")}
elseif  (DownInverted && Status == "Idle"){initiateMove("DownInverted")}
elseif  (Right && Status == "Idle"){initiateMove("Right")}
elseif  (RightInverted && Status == "Idle"){initiateMove("RightInverted")}
elseif  (Left && Status == "Idle"){initiateMove("Left")}
elseif  (LeftInverted && Status == "Idle"){initiateMove("LeftInverted")}
elseif  (Front && Status == "Idle"){initiateMove("Front")}
elseif  (FrontInverted && Status == "Idle"){initiateMove("FrontInverted")}
elseif  (Back && Status == "Idle"){initiateMove("Back")}
elseif  (BackInverted && Status == "Idle"){initiateMove("BackInverted")}
