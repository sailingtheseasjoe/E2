@name SEX
@inputs 
@outputs 
@persist I:number Word:string FirstEntity:entity [SpecialCharacters,LowerCaseCharacters]:string SpecialCharacterModelPath:array
@trigger 

if(first())
{
    I=1
    Word = "Hows it going"
    
    
    SpecialCharacters = ",#-.'?!%/_:+<>()="
    SpecialCharacterModelPath = array("models/sprops/misc/alphanum/alphanum_com.mdl",
                                      "models/sprops/misc/alphanum/alphanum_pdsign.mdl",
                                      "models/sprops/misc/alphanum/alphanum_min.mdl",
                                      "models/sprops/misc/alphanum/alphanum_prd.mdl",
                                      "models/sprops/misc/alphanum/alphanum_apost.mdl",
                                      "models/sprops/misc/alphanum/alphanum_qmark.mdl",
                                      "models/sprops/misc/alphanum/alphanum_xmark.mdl",
                                      "models/sprops/misc/alphanum/alphanum_pcnt.mdl",
                                      "models/sprops/misc/alphanum/alphanum_div.mdl",
                                      "models/sprops/misc/alphanum/alphanum_underscore.mdl",
                                      "models/sprops/misc/alphanum/alphanum_colon.mdl",
                                      "models/sprops/misc/alphanum/alphanum_plu.mdl",
                                      "models/sprops/misc/alphanum/alphanum_lessthan.mdl",
                                      "models/sprops/misc/alphanum/alphanum_greaterthan.mdl",
                                      "models/sprops/misc/alphanum/alphanum_lpar.mdl",
                                      "models/sprops/misc/alphanum/alphanum_rpar.mdl",
                                      "models/sprops/misc/alphanum/alphanum_equal.mdl")
    LowerCaseCharacters = "abcdefghijklmnopqrstuvwxyz"
    
    
    Lower = LowerCaseCharacters:find(Word[1])
            Spec = SpecialCharacters:find(Word[1])
            if(Lower){HoloString = "models/sprops/misc/alphanum/alphanum_l_"+Word[1]:lower()+".mdl"}
            elseif(Spec){HoloString = SpecialCharacterModelPath[Spec,string]}
            else{HoloString = "models/sprops/misc/alphanum/alphanum_"+Word[1]:lower()+".mdl"}
    FirstEntity = propSpawn(HoloString,entity():pos()-vec(1*12,0,-50),ang(0,0,0),1)
    #FirstEntity = propSpawn("models/sprops/misc/alphanum/alphanum_"+Word:sub(I,I)+".mdl",entity():pos()-vec(I*12,0,-50),ang(0,0,0),1)
    FirstEntity:setMaterial("engine/singlecolor")
    #FirstEntity:setColor(vec(0,0,0))
    I++
}
if(I<=Word:length())
{
    #
    if(Word[I]!=" ")
    {
            Lower = LowerCaseCharacters:find(Word[I])
            Spec = SpecialCharacters:find(Word[I])
            if(Lower){HoloString = "models/sprops/misc/alphanum/alphanum_l_"+Word[I]:lower()+".mdl"}
            elseif(Spec){HoloString = SpecialCharacterModelPath[Spec,string]}
            else{HoloString = "models/sprops/misc/alphanum/alphanum_"+Word[I]:lower()+".mdl"}
            #propSpawn("models/sprops/misc/alphanum/alphanum_"+Word:sub(I,I)+".mdl",entity():pos()-vec(I*12,0,-50),ang(0,0,0),1):parentTo(FirstEntity)
            PropSpawned = propSpawn(HoloString,entity():pos()-vec(I*12,0,-50),ang(0,0,0),1)
            PropSpawned:parentTo(FirstEntity)
            PropSpawned:setMaterial("engine/singlecolor")
            #PropSpawned:setColor(vec(0,0,0))
            #holoCreate(I,entity():pos()+vec(55*I,0,0),vec(5,1,5),ang(0,180,0),vec(255,255,255))
            #Spacing = SlimLetters:find(S[I]) ? Spacing+6 : Spacing+13   
            #holoCreate(I,entity():pos()+vec(Spacing,0,0),vec(1,1,1),ang(0,180,0),vec(255,255,255))
            
            
            #HoloString = Spec ?  : "models/sprops/misc/alphanum/alphanum_"+S[I]:lower()+".mdl"
            #holoModel(I,HoloString)
            #holoMaterial(I,"engine/singlecolor")
            #holoParent(I,entity())  
            
    }
    #
    
    interval(300)
    I++
}

