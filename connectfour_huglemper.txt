@name ConnectFour_Leghumper
@inputs 
@outputs 
@persist  [NumPieces,P,HighestColumn,NumSame,I,P1Used,P2Used,K]:number [ColumnPieceCount,Table,HoloIndexes,WinningPiecesIndex]:array GameState:string [P1,P2]:entity
@trigger 
@model models/hunter/plates/plate6x7.mdl
function void newFloatingText(S:string,From:number)
{
    for(K=From,From+S:length()-1)
    {
        if(S[K-From+1]!=" ")
        {
            holoCreate(K,entity():pos()+vec(55*(K-From-1),0,0),vec(5,1,5),ang(0,180,0),vec(255,255,255))
            HoloString = "models/sprops/misc/alphanum/alphanum_"+S[K-From+1]:lower()+".mdl"
            #print(HoloString)
            holoModel(K,HoloString)
        }
    }
    for(I=From,From+S:length()-1)
    {
        holoParent(I,56)
    }
    holoPos(56,entity():pos()+vec(0,0,255))
}
function number checkVertical(H:number,ColorToCheck:vector)
{
    I=ColumnPieceCount[H,number]
    NumSame = 0
    NumChecks = 0
    Start = (H-1)*6+1
    NumString = ""
    for(I=Start,Start+ColumnPieceCount[H,number]-1)
    {
        if(Table[I,vector]==ColorToCheck)
        {
            NumSame++
        }
        else
        {
            NumSame = 0
        }
        NumChecks++
    }
    return NumSame
}
function void checkHorizontal(H:number,ColorToCheck:vector)
{
    IStart = ColumnPieceCount[H,number]
    NumSame = 0
    NumChecks = 0
    Winner = 0
    CheckString = array("==========================")
    StartingPiece = IStart
    EndPiece = 0
    for(I=1,7)
    {
        if(Table[(IStart+(I-1)*6),vector] == ColorToCheck)
        {
            NumSame++
        }
        else
        {
            NumSame = 0
            StartingPiece = (IStart+(I-1)*6)
        }
        CheckString:pushString((IStart+(I-1)*6):toString())
        NumChecks++
        
        if(NumSame>=4)
        {
            WinningPiecesIndex = array()
            for(J=1,4)
            {
                WinningPiecesIndex[J,number] = HoloIndexes[StartingPiece+J*6,number]
            }
            EndPiece = (IStart+(I-1)*6)
            Winner = 1
            GameState = "WIN"
            entity():soundPlay(3,5,"misc/happy_birthday.wav")
            timer("newGame",4000)
            break
        }
    }
    #printTable(CheckString)
}
function vector getColor(X,Y:number)
{
    if(X>0&&X<=7&&Y>0&&Y<=6)
    {
        ColorIndex = (X-1)*6+Y
        return Table[ColorIndex,vector]
    }
    else
    {
        return vec(-1,-1,-1)
    }
}
function void checkCross(H:number,ColorToCheck:vector)
{
    IStart = 0
    NumSame = 0
    NumChecks = 0
    SameColors = 0
    Stringy = array()
    NotSameColors = 0
    StartingFieldIndex = (H-1)*6+ColumnPieceCount[H,number]
    StartingField = Table[StartingFieldIndex,number]
    CheckY = ColumnPieceCount[H,number]-4
    StartX = 1
    
    Win = 0
    for(I=H-3,H+3)
    {
            CheckY++

            if(getColor(I,CheckY) == ColorToCheck)
            {
                NumSame++
                SameColors++
                Stringy:pushString("+")
                if(NumSame >= 4)
                {
                    WinningTileIndex = (I-1)*6+CheckY
                    Win = 1
                    GameState = "WIN"
                    entity():soundPlay(3,5,"misc/happy_birthday.wav")
                    timer("newGame",4000)
                    WinningPiecesIndex = array()
                    for(J=0, 3)
                    {
                        HoloIndex = HoloIndexes[WinningTileIndex-J*7,number]
                        WinningPiecesIndex[J+1,number] = HoloIndex
                    }
                    break
                }
            }
            else
            {
                
                NumSame = 0
                StartX = H
                NotSameColors++
                Stringy:pushString("-")
            }
            NumChecks++   
            
    }
#================================================================================================#
}
function void checkCross2(H:number,ColorToCheck:vector)
{
    IStart = 0
    NumSame = 0
    NumChecks = 0
    SameColors = 0
    Stringy = array()
    NotSameColors = 0
    StartingFieldIndex = (H-1)*6+ColumnPieceCount[H,number]
    StartingField = Table[StartingFieldIndex,number]
    CheckY = ColumnPieceCount[H,number]+4
    StartX = 1
    
    Win = 0
    for(I=H-3,H+3)
    {
            CheckY--

            if(getColor(I,CheckY) == ColorToCheck)
            {
                NumSame++
                SameColors++
                Stringy:pushString("+")
                if(NumSame >= 4)
                {
                    WinningTileIndex = (I-1)*6+CheckY
                    Win = 1
                    GameState = "WIN"
                    entity():soundPlay(3,5,"misc/happy_birthday.wav")
                    timer("newGame",4000)
                    WinningPiecesIndex = array()
                    for(J=0, 3)
                    {
                        HoloIndex = HoloIndexes[WinningTileIndex-J*5,number]
                        WinningPiecesIndex[J+1,number] = HoloIndex
                    }
                    break
                }
            }
            else
            {
                
                NumSame = 0
                StartX = H
                NotSameColors++
                Stringy:pushString("-")
            }
            NumChecks++   
            
    }
#================================================================================================#
}
function number checkWin(H:number)
{
    return 0
}
function initHolograms()
{
    holoCreate(43,entity():pos()+vec(0,0,0),vec(3,3,0.1))
    holoModel(43,"cylinder")
    holoColor(43,vec(255,255,0))
    
    holoCreate(44,entity():pos()+vec(0,1,5),vec(1,0.1,1))
    holoModel(44,"models/sprops/misc/alphanum/alphanum_e.mdl")
    holoColor(44,vec(0,0,0))
    holoAng(44,ang(0,0,0))
    holoParent(44,43)
    
    holoCreate(45,entity():pos()+vec(0,0,-10),vec(1,1,1))
    holoModel(45,"models/sprops/misc/alphanum/alphanum_arrow_b.mdl")
    holoColor(45,vec(0,0,0))
    holoAng(45,ang(0,0,-180))
    holoParent(45,43)
    
    holoCreate(46,entity():pos()+vec(0,-1,5),vec(1,0.1,1))
    holoModel(46,"models/sprops/misc/alphanum/alphanum_e.mdl")
    holoColor(46,vec(0,0,0))
    holoAng(46,ang(-180,0,0))
    holoParent(46,43)
    holoAlpha(43,0)
    holoAlpha(44,0)
    holoAlpha(45,0)
    holoAlpha(46,0)
    ###############################################################################
    holoCreate(47,entity():pos()+vec(0,190,-80),vec(3,3,3))
    holoModel(47,"models/player/items/humans/top_hat.mdl")
    holoMaterial(47,"sprops/trans/lights/light_plastic")
    holoColor(47,vec(255,0,0))
    holoAng(47,ang(0,curtime(),0))
    
    holoCreate(48,entity():pos()+vec(0,190,-80),vec(2,2,2))
    holoModel(48,"models/sprops/misc/alphanum/alphanum_arrow_b.mdl")
    holoColor(48,vec(255,0,0))
    holoAng(48,ang(0,0,-180))
    
    holoCreate(49,entity():pos()+vec(0,-190,-80),vec(3,3,3))
    holoModel(49,"models/player/items/humans/top_hat.mdl")
    holoMaterial(49,"sprops/trans/lights/light_plastic")
    holoColor(49,vec(255,255,0))
    holoAng(49,ang(0,curtime(),0))
    
    holoCreate(50,entity():pos()+vec(0,-190,-80),vec(2,2,2))
    holoModel(50,"models/sprops/misc/alphanum/alphanum_arrow_b.mdl")
    holoColor(50,vec(255,255,0))
    holoAng(50,ang(0,0,-180))
    newFloatingText("Connect Four",51)
}
if(first())
{
    entity():setMaterial("hunter/mywindow")
    entity():setColor(0,0,255)
    entity():setAng(ang(90,90,0))
    entity():setPos(entity():pos()+vec(0,0,entity():aabbSize():y()/2))
    NumPieces = 0
    #P1 = owner()
    HighestColumn = 0
    ColumnPieceCount = array(0,0,0,0,0,0,0)
    GameState = "INGAME"
    P1 = noentity()
    P2 = noentity() 
    timer("initHolograms",2000)
}
if(clk("initHolograms")){initHolograms()}
function void placePiece(HorizontalPlace:number, PieceColor:vector)
{
    if(ColumnPieceCount[HorizontalPlace,number]<6)
    {
        NumPieces++
        ArrayIndex = (HorizontalPlace-1)*6+ColumnPieceCount[HorizontalPlace,number]+1
        Table[ArrayIndex,vector] = PieceColor
        ColumnPieceCount[HorizontalPlace,number] = ColumnPieceCount[HorizontalPlace,number]+1
        PieceCount = ColumnPieceCount[HorizontalPlace,number]
        #print("On column "+HorizontalPlace+" there are "+ColumnPieceCount[HorizontalPlace,number]+" pieces.")
        HoloIndexes[ArrayIndex,number] = NumPieces
        holoCreate(NumPieces,entity():pos()+vec(144-(HorizontalPlace-1)*48,0,-120+(PieceCount-1)*48),vec(3,3,0.1))
        holoModel(NumPieces,"cylinder")
        holoColor(NumPieces,PieceColor)
        if(HighestColumn<PieceCount){HighestColumn=PieceCount}
        P=!P
        if(HighestColumn > 3)
        {
            if(checkVertical(HorizontalPlace,PieceColor)>=4)
            {
                IStart = (HorizontalPlace-1)*6+ColumnPieceCount[HorizontalPlace,number]-3
                for(I=IStart,IStart+3)
                {
                    WinningPiecesIndex:pushNumber(HoloIndexes[I,number])
                }
                GameState="WIN"
                entity():soundPlay(3,5,"misc/happy_birthday.wav")
                timer("newGame",4000)
            }
            
            checkCross(HorizontalPlace,PieceColor)
            checkCross2(HorizontalPlace,PieceColor)
        }
        checkHorizontal(HorizontalPlace,PieceColor)
        entity():soundPlay(1,1,"physics/plastic/plastic_barrel_impact_soft2.wav")
    }
}
if(NumPieces < 42 && GameState=="INGAME")
{
    if(P)
    {
        HoloPositionX = clamp(round((P1:aimPos():x()-entity():pos():x())/48)*48,-144,144)
        holoPos(43,entity():pos()+vec(HoloPositionX,0,160))
        
        if(P1:keyUse() && P1Used == 0)
        {
            PieceX = (-HoloPositionX+144)/48+1
            P1Used = 1
            if(P && ColumnPieceCount[PieceX,number]<6)
            {
                PieceClr = vec(255,0,0)
                holoColor(43,vec(255,255,0))
            }
            elseif(ColumnPieceCount[PieceX,number]<6)
            {
                PieceClr=vec(255,255,0)
                holoColor(43,vec(255,0,0))
            }
            
            placePiece(PieceX,PieceClr)
            
        }
        elseif(P1:keyUse() != 1){P1Used=0}
        
    }
    else
    {
        HoloPositionX = clamp(round((P2:aimPos():x()-entity():pos():x())/48)*48,-144,144)
        holoPos(43,entity():pos()+vec(HoloPositionX,0,160))
        
        if(P2:keyUse() && P2Used == 0)
        {
            P2Used = 1
            PieceX = (-HoloPositionX+144)/48+1
            if(P && ColumnPieceCount[PieceX,number]<6)
            {
                PieceClr = vec(255,0,0)
                holoColor(43,vec(255,255,0))
            }
            elseif(ColumnPieceCount[PieceX,number]<6)
            {
                PieceClr=vec(255,255,0)
                holoColor(43,vec(255,0,0))
            }
            
            placePiece(PieceX,PieceClr)
        }
        elseif(P2:keyUse() != 1){P2Used=0}
    }
    if(P1==noentity())
    {
        
        holoAng(47,ang(0,curtime()*100,0))
        holoPos(48,entity():pos()+vec(0,190,-90+sin(curtime()*150)*10))
        findByClass("player")
        FoundClosest = findClosest(entity():pos()+vec(0,190,-90))
        if(FoundClosest:pos():distance(entity():pos()+vec(0,190,-150)) < 50 && FoundClosest != P2)
        {
            P1 = FoundClosest
            print("New P1: "+P1:name())
            holoAng(47,ang(0,90,0))
            holoAlpha(48,0)
            holoAlpha(43,255)
            holoAlpha(44,255)
            holoAlpha(45,255)
            holoAlpha(46,255)
            entity():soundPlay(2,2,"vo/coast/odessa/nlo_cub_volunteer.wav")
        }
    }
    else
    {
        holoPos(47,P1:pos()+vec(0,0,120))
        if(P1:keyReload() || P1:pos():distance(entity():pos())>800)
        {
            P1 = noentity()
            holoPos(47,entity():pos()+vec(0,190,-80))
            holoAlpha(48,255)
            holoAlpha(43,0)
            holoAlpha(44,0)
            holoAlpha(45,0)
            holoAlpha(46,0)
            entity():soundPlay(2,2,"vo/canals/female01/gunboat_parkboat.wav")
        }
        if(P2==noentity())
        {
           #timer("newGame",1000)
        }
    }
    if(P2==noentity())
    {
        
        holoAng(49,ang(0,curtime()*100,0)) #Yellow hat
        holoPos(50,entity():pos()+vec(0,-190,-90+sin(curtime()*150)*10))
        findByClass("player")
        FoundClosest = findClosest(entity():pos()+vec(0,-190,-90))
        if(FoundClosest:pos():distance(entity():pos()+vec(0,-190,-150)) < 50 && FoundClosest != P1)
        {
            P2 = FoundClosest
            print("New P2: "+P2:name())
            holoAng(49,ang(0,90,0))
            holoAlpha(50,0)
            holoAlpha(43,255)
            holoAlpha(44,255)
            holoAlpha(45,255)
            holoAlpha(46,255)
            entity():soundPlay(2,2,"vo/coast/odessa/nlo_cub_freeman.wav")
        }
        if(P1==noentity())
        {
            timer("newGame",1000)
        }
    }
    else
    {
        holoPos(49,P2:pos()+vec(0,0,120)) #Yellow hat
        if(P2:keyReload() || P2:pos():distance(entity():pos())>800)
        {
            P2 = noentity()
            holoPos(49,entity():pos()+vec(0,-190,-80))
            holoAlpha(50,255)
            holoAlpha(43,0)
            holoAlpha(44,0)
            holoAlpha(45,0)
            holoAlpha(46,0)
            entity():soundPlay(2,2,"vo/canals/female01/gunboat_parkboat.wav")
        }
    }
    interval(100)
    if(P1==noentity()&&P2==noentity())
    {
        holoAng(56,ang(0,curtime()*50,0))
    }
}
elseif(NumPieces >= 42)
{
    soundPlay(1,0,"vo/k_lab/al_thatsit.wav")
    timer("newGame",2000)
}
else
{
    if(GameState=="WIN")
    {
        P=!P
        for(I=1,4)
        {
            holoAlpha(WinningPiecesIndex[I,number],P*255)
        }
        interval(500)
    }
}
if(clk("newGame"))
{
    GameState = "INGAME"
    for(I=1,42)
    {
        holoDelete(I)
    }
    holoCreate(43,entity():pos()+vec(0,0,0),vec(3,3,0.1))
    holoModel(43,"cylinder")
    holoColor(43,vec(255,255,0))
    NumPieces = 0
    HighestColumn = 0
    ColumnPieceCount = array(0,0,0,0,0,0,0)
    WinningPiecesIndex = array()
    Table = array()
    P=0
}
#
