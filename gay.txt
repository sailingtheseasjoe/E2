@name GaySnake
@inputs 
@outputs 
@persist [I,J]:number Time:number [PrevGay,TargetGay]:entity Text:string
@trigger 
function void newFloatingText(S:string)
{
    Text = S
    for(I=1,S:length())
    {
        #This is a for-loop. I use this to go through the characters of the input text, and assign a new hologram model to it.
        #First you have to give a variable, in this case "I" an initial value. I gave it 1
        #The code below will repeat, and each time it repeats, it adds +1 to your variable "I"
        #If "I" reaches the end value, which is S:length() in this case (How many characters are in your input text), the it will exit the loop.
        if(S[I]!=" ") #We check if the character is not a space. We don't need a hologram for that.
        {
            holoCreate(I,entity():pos()+vec(-12*I,0,0),vec(1,1,1),ang(0,90,0))
            HoloString = "models/sprops/misc/alphanum/alphanum_"+S[I]+".mdl"
            #print(HoloString)
            holoModel(I,HoloString)
            if(S[I] == ",")
            {
                holoModel(I,"models/sprops/misc/alphanum/alphanum_com.mdl")
            }
        }
    }
}
if(first() || duped())
{
    newFloatingText("Zylenxxx is awesome")
}
function void findNearestPlayer()
{
    findByClass("player")
    PrevGay = TargetGay
    TargetGay = findClosest(entity():pos())
    if(PrevGay != TargetGay)
    {
        holoDeleteAll()
        timer("newText",200)
    }
}

timer("gayTimer",3000)
#if(clk("gayTimer")){findNearestPlayer()}
#if(clk("newText"))
#{
#    RemoveCrap = TargetGay:name():sub(TargetGay:name():find(">")+1)
#    newFloatingText("Hi, "+RemoveCrap)
#}
#if(TargetGay:pos():distance(entity():pos())<500)#This code moves the holograms up and down.
#{
    for(J=1,Text:length()) 
    #for(J=1,10)
    {
        #We need to go through each character, and move them according to time.
        #I added a +4 to the end, because I added a "Hi, " to the input, which is 4 characters.
        holoPos(J,entity():pos()+vec(0,-12*J,sin(Time*20-J*20)*10+50))
        holoColor(J,vec(sin(Time*20-J*30)*255,sin((Time*20-J*30)-J*20)*255,sin((Time*20-J*30)-J*30)*255)) #I was drunk when I wrote this mess. Don't ask how I got this formula xD
    }
    interval(100)
#}
Time++
