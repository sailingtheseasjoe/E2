@name Pythong_Mouse_controllable
@inputs 
@outputs 
@persist [Time,Oscillation,Distance,SnakeLength,SnakeSpeed,AimRadius]:number HeadModel:string [HeadPos,NewPos]:vector AngleToGo:angle [BodyPartsPos,BodyPartsAng]:array Player:entity
@trigger 
if(first())
{
    findByClass("player")
    Player = findClosest(entity():pos())
    SnakeLength = 20
    SnakeSpeed = 5
    Distance = 100
    AimRadius = 50
    #HeadModel = "models/Gibs/HGIBS.mdl"
    HeadModel = "models/weapons/c_models/c_bread/c_bread_baguette.mdl"
    #HeadModel = "models/hunter/blocks/cube05x05x05.mdl"
    HoloSize = 1
    holoCreate(1,entity():pos(),vec(HoloSize*1.2,HoloSize*1.2,HoloSize*1.2))
    holoModel(1,HeadModel)
    BodyPartsPos = array()
    BodyPartsAng = array()
    HeadPos = entity():pos()
    for(I=2,SnakeLength)
    {
        holoCreate(I,entity():pos())
        holoModel(I,HeadModel)
        holoScale(I,vec(HoloSize,HoloSize,HoloSize))
    }
}
interval(50)
Time+=5

TargetPos = Player:aimPos()+vec(sin(Time)*AimRadius,cos(Time)*AimRadius,0)
OldAngle = AngleToGo
AngleToGo = (HeadPos - TargetPos):toAngle()   +ang(0,sin(Time*10)*40,0)
Comp1 = HeadPos + vec(-cos(AngleToGo:yaw())*SnakeSpeed,-sin(AngleToGo:yaw())*SnakeSpeed,0)
HeadPos = rangerOffset(Comp1+vec(0,0,20),Comp1-vec(0,0,20)):position()


BodyPartsPos:unshiftVector(HeadPos+vec(0,0,5))
BodyPartsAng:unshiftAngle(AngleToGo)

holoAng(1,AngleToGo+ang(0,180,0))
holoPos(1,HeadPos+vec(0,0,5))
if(BodyPartsPos:count()>SnakeLength){BodyPartsPos:pop() BodyPartsAng:pop()}

for(I=2,SnakeLength)
{
    holoPos(I,BodyPartsPos[I,vector])
    holoAng(I,BodyPartsAng[I,angle])#+ang(0,90,90))
}
