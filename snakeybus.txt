@name Snakeybus
@outputs SnakePositions:array NumEntries:number NormalVector:vector DistanceMultiplier:number
@persist [SnakeAngles]:array Head:entity [MinimumDistanceBetweenNodes,NumHolos,TickDelay]:number
@trigger 
if(first())
{
    Head = entity():getConstraints()[1,entity]
    SnakePositions = array()
    SnakeAngles = array()
    MinimumDistanceBetweenNodes = 10
    SnakePositions:pushVector(Head:pos())
    SnakeAngles:pushAngle(Head:angles())
    Scale = vec(1,1,1)
    Color = vec(255,255,255)
    NumHolos = 10
    TickDelay = 18
    print(Head:model())
    #for(I=1,NumHolos)
    #{
    #    holoCreate(I,Head:pos(),Scale,Head:angles(),Color,Head:model())
    #}
    holoCreate(1,entity():pos())
}
event tick()
{
    HeadPos = Head:pos()
    if(HeadPos:distance(SnakePositions[1,vector]) > MinimumDistanceBetweenNodes)
    {
        DistanceMultiplier = MinimumDistanceBetweenNodes / HeadPos:distance(SnakePositions[1,vector]) 
        NormalVector = (SnakePositions[1,vector]-HeadPos):normalized()
        holoPos(1,HeadPos-NormalVector*MinimumDistanceBetweenNodes*DistanceMultiplier)
        SnakePositions:unshiftVector(HeadPos-NormalVector*MinimumDistanceBetweenNodes*DistanceMultiplier)
        SnakeAngles:unshiftAngle(Head:angles())
        NumEntries = SnakePositions:count()
        if(SnakePositions:count() > NumHolos * TickDelay){SnakePositions:popVector() SnakeAngles:popAngle()}
        #for(I=1,NumHolos)
        #{
        #    holoPos(I,SnakePositions[I*TickDelay,vector])
        #    holoAng(I,SnakeAngles[I*TickDelay,angle])
        #}
    }
}
