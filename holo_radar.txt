@name Holo Radar
@inputs
@outputs Targets
@persist N:number
@trigger
 
if(first())
{
# Find Players
findInSphere(entity():pos(), 90000)
Targets = findClipToClass("player")
 
# Initialize a black backdrop for the other holograms
holoCreate(0,entity():pos() + vec(0,0,5), vec(40,40,1), ang(), vec())
holoModel(0,"plane")
holoAlpha(0,128)
 
# Initialize radar holograms
for( X = 1, Targets)
{
if(findResult(X):isPlayer())
{
holoCreate( X, entity():pos(), vec(0.5,0.5,0.5) )
holoModel( X, findResult(X):model())
holoScale(X,vec(0.2,0.2,0.2))
}

#Now for the physics props part
#N = Targets:count()
#findInSphere(entity():pos(), 90000)
#Targets = findClipToClass("prop_phys")
#}
#for(X = N,N+count(Targets))
#{
#    
}
}
 
interval(200)
 
# Update position of backdrop
holoPos(0,entity():pos() + vec(0,0,10))

 
# Update positions of radar holograms
for( X = 1, Targets)
{
 
if(findResult(X):isPlayer())
{
# Get position of targeted player, localize the vector, place at expression chip, and scale down
holoPos( X, (entity():pos() + entity():toLocal(findResult(X):pos()) / vec(10,10,5)) + vec(0,0,15) )
holoAng( X, findResult(X):angles())
holoAnim( X, 2)
}
}
