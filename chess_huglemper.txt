@name Chess_Huglemper
@inputs [Player1,Player2]:entity
@outputs 
@persist I:number [TableOfPositions]:array Table:table [P2PrevLookingAt,PrevLookingAt,P2Used]:number [P1Selection,P2Selection,P1NewSelection,P2NewSelection]:string [P1,P2]:entity P1Used:number
@trigger 

function vector chessLabelToPosition(Label:string)
{
    X = CharToNum = 73-toByte(Label)
    Y = Label[2]:toNumber()
    RealPosition = TableOfPositions[(Y-1)*8+X,vector]
    return RealPosition
}
function void movePiece(From:string, To:string)
{
    HologramToMove = (Table[From,string]:sub(Table[From, string]:find("-")+1)):toNumber()
    HologramsNewPosition = chessLabelToPosition(To)
    holoPos(HologramToMove,HologramsNewPosition)
    Table[To,string] = Table[From, string]
    Table[From,string] = ""
}
function void createCoordinateReferences()
{
    for(I=1,8)
    {
        for(J=1,8)
        {
            TableOfPositions[(I-1)*8+J,vector] = entity():pos()+vec(-(J-1)*32.5,(I-1)*32.5,0)
        }
    }

}
function string mousePosToLabel(Mouse:vector)
{
    Xs = toChar(73-clamp(-floor((Mouse:x()-entity():pos():x()+16.25)/32.5)+1,1,8))
    Y = clamp(floor((Mouse:y()-entity():pos():y()+16.26)/32.5)+1,1,8)
    return Xs+toString(Y)
}
function void newGame()
{
    #I will create a new array that stores which fields contain which holoModel ID.
    holoCreate(1,chessLabelToPosition("H1"),vec(1,1,1))
    holoModel(1,"models/props_phx/games/chess/white_rook.mdl")
    Table["H1", string] = "white_rook-1"
    holoCreate(2,chessLabelToPosition("G1"),vec(1,1,1))
    holoModel(2,"models/props_phx/games/chess/white_knight.mdl")
    Table["G1", string] = "white_knight-2"
    holoCreate(3,chessLabelToPosition("F1"),vec(1,1,1))
    holoModel(3,"models/props_phx/games/chess/white_bishop.mdl")
    Table["F1", string] = "white_bishop-3"
    holoCreate(4,chessLabelToPosition("E1"),vec(1,1,1))
    holoModel(4,"models/props_phx/games/chess/white_king.mdl")
    Table["E1", string] = "white_king-4"
    holoCreate(5,chessLabelToPosition("D1"),vec(1,1,1))
    holoModel(5,"models/props_phx/games/chess/white_queen.mdl")
    Table["D1", string] = "white_queen-5"
    holoCreate(6,chessLabelToPosition("C1"),vec(1,1,1))
    holoModel(6,"models/props_phx/games/chess/white_bishop.mdl")
    Table["C1", string] = "white_bishop-6"
    holoCreate(7,chessLabelToPosition("B1"),vec(1,1,1))
    holoModel(7,"models/props_phx/games/chess/white_knight.mdl")
    Table["B1", string] = "white_knight-7"
    holoCreate(8,chessLabelToPosition("A1"),vec(1,1,1))
    holoModel(8,"models/props_phx/games/chess/white_rook.mdl")
    Table["A1", string] = "white_rook-8"
    for(I=9,16)
    {
        holoCreate(I,entity():pos()-vec((I-9)*32.5,-32.5,0), vec(1,1,1))
        holoModel(I,"models/props_phx/games/chess/white_pawn.mdl")
        TableAddress = toChar(81-I)+"2"
        Table[TableAddress, string] = "white_pawn-"+toString(I)
    }
    for(I=1,8)
    {
        holoCreate(16+I,entity():pos()-vec((I-1)*32.5,-6*32.5,0), vec(1,1,1))
        holoModel(16+I,"models/props_phx/games/chess/black_pawn.mdl")
        TableAddress = toChar(73-I)+"7"
        Table[TableAddress, string] = "black_pawn-"+toString(I+16)
    }
    holoCreate(25,chessLabelToPosition("H8"),vec(1,1,1))
    holoModel(25,"models/props_phx/games/chess/black_rook.mdl")
    Table["H8",string] = "black_rook-25"
    holoCreate(26,chessLabelToPosition("G8"),vec(1,1,1))
    holoModel(26,"models/props_phx/games/chess/black_knight.mdl")
    Table["G8",string] = "black_knight-26"
    holoCreate(27,chessLabelToPosition("F8"),vec(1,1,1))
    holoModel(27,"models/props_phx/games/chess/black_bishop.mdl")
    Table["F8",string] = "black_bishop-27"
    holoCreate(28,chessLabelToPosition("E8"),vec(1,1,1))
    holoModel(28,"models/props_phx/games/chess/black_king.mdl")
    Table["E8",string] = "black_king-28"
    holoCreate(29,chessLabelToPosition("D8"),vec(1,1,1))
    holoModel(29,"models/props_phx/games/chess/black_queen.mdl")
    Table["D8",string] = "black_queen-29"
    holoCreate(30,chessLabelToPosition("C8"),vec(1,1,1))
    holoModel(30,"models/props_phx/games/chess/black_bishop.mdl")
    Table["C8",string] = "black_bishop-30"
    holoCreate(31,chessLabelToPosition("B8"),vec(1,1,1))
    holoModel(31,"models/props_phx/games/chess/black_knight.mdl")
    Table["B8",string] = "black_knight-31"
    holoCreate(32,chessLabelToPosition("A8"),vec(1,1,1))
    holoModel(32,"models/props_phx/games/chess/black_rook.mdl")
    Table["A8",string] = "black_rook-32"
}
function number chessLabelToHologramID(S:string)
{
    PName =Table[S,string]
    HoloID = PName:sub(PName:find("-")+1):toNumber()
    return HoloID
}
function number selectedHologramID(Ent:entity)
{
    PieceName = Table[mousePosToLabel(Ent:aimPos()),string]
    HoloID = (PieceName:sub(PieceName:find("-")+1)):toNumber()
    return HoloID
}
function void sendToGraveYard(Piece:string)
{
    PieceName = Table[Piece,string]
    PieceHoloID = PieceName:sub(PieceName:find("-")+1)
    print(PieceHoloID+" was sent to graveyard.")
}
function void p1Use()
{
    P1Selection = P1NewSelection
    P1NewSelection = mousePosToLabel(P1:aimPos())
    if(P1Selection != P1NewSelection && P1Selection != "" && Table[P1NewSelection, string] == "")
    {
        movePiece(P1Selection,P1NewSelection)   
        P1Selection = ""
        P1NewSelection = ""
        entity():soundPlay(1,1,"player/footsteps/cleats_conc_02.wav")
    }
    elseif(P1NewSelection!="")
    {
        if(Table[P1NewSelection,string]:sub(1,1) == "w")
        {
            holoColor(chessLabelToHologramID(P1Selection),vec(255,255,255))
            entity():soundPlay(1,1,"player/footsteps/sand1.wav")
        }
        else
        {
            sendToGraveYard(P1NewSelection)
        }
    }
}

function void p2Use()
{
    P2Selection = P2NewSelection
    P2NewSelection = mousePosToLabel(P2:aimPos())
    if(P2Selection != P2NewSelection && P2Selection != "" && Table[P2NewSelection, string] == "")
    {
        movePiece(P2Selection,P2NewSelection)   
        P2Selection = ""
        P2NewSelection = ""
        entity():soundPlay(1,1,"player/footsteps/cleats_conc_02.wav")
    }
    elseif(P2NewSelection!="")
    {
        holoColor(chessLabelToHologramID(P2Selection),vec(255,255,255))
        entity():soundPlay(1,1,"player/footsteps/sand1.wav")
    }
}
if(first())
{
    createCoordinateReferences()
    newGame()
    P1 = owner()
    holoCreate(33,entity():pos(),vec(2,2,0.2))
    holoModel(33,"cylinder")
    holoColor(33,vec(0,0,255))
    holoCreate(34,entity():pos(),vec(2,2,0.2))
    holoModel(34,"cylinder")
    holoColor(34,vec(0,0,255))
    holoCreate(300,entity():pos()-vec(4*28,-4*28,20))
    holoModel(300,"models/props_phx/games/chess/board.mdl")
    holoAng(300,ang(-90,0,0))
}

interval(100)
#if(Table[mousePosToLabel(P1:aimPos()),string] != "")
#{
    P1CurrentlyLookingAt=selectedHologramID(P1)
    if(PrevLookingAt == chessLabelToHologramID(P1NewSelection)) { PrevHolosNewColor = vec(0,0,255)}
    elseif(PrevLookingAt != P1CurrentlyLookingAt && PrevLookingAt != chessLabelToHologramID(P1Selection)){PrevHolosNewColor = vec(255,255,255)}
    else{PrevHolosNewColor = vec(0,255,0)}
    holoColor(PrevLookingAt,PrevHolosNewColor)
    if(P1CurrentlyLookingAt != chessLabelToHologramID(P1NewSelection)){holoColor(P1CurrentlyLookingAt, vec(0,255,0))}
    elseif(Table[P1CurrentlyLookingAt,string]:sub(1,1)=="w"){holoColor(P1CurrentlyLookingAt, vec(0,0,255))}
    PrevLookingAt = selectedHologramID(P1)
    holoPos(33, chessLabelToPosition(mousePosToLabel(P1:aimPos())))

    P2CurrentlyLookingAt=selectedHologramID(P2)
    if(P2PrevLookingAt == chessLabelToHologramID(P2NewSelection)) { P2PrevHolosNewColor = vec(0,0,255)}
    elseif(P2PrevLookingAt != P2CurrentlyLookingAt && P2PrevLookingAt != chessLabelToHologramID(P2Selection)){P2PrevHolosNewColor = vec(255,255,255)}
    else{P2PrevHolosNewColor = vec(0,255,0)}
    holoColor(P2PrevLookingAt,P2PrevHolosNewColor)
    if(P2CurrentlyLookingAt != chessLabelToHologramID(P2NewSelection)){holoColor(P2CurrentlyLookingAt, vec(0,255,0))}
    else{holoColor(P2CurrentlyLookingAt, vec(0,0,255))}
    P2PrevLookingAt = selectedHologramID(P2)
    holoPos(34, chessLabelToPosition(mousePosToLabel(P2:aimPos())))
    findByClass("player")
    findExcludePlayer(owner())
    P2 = findClosest(entity():pos())
#}
if(P1:keyUse() && P1Used == 0)
{
    P1Used = 1
    p1Use()
}
elseif(P1:keyUse() != 1){P1Used=0}
if(P2:keyUse() && P2Used == 0)
{
    P2Used = 1
    p2Use()
}
elseif(P2:keyUse() != 1){P2Used=0}
#print(mousePosToLabel(owner():aimPos()))
