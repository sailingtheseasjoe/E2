@name Tetris_Leghumper
@inputs [W,A,S,D]:number Screen:wirelink
@outputs 
@persist [BlockSize,PlayAreaWidth,PlayAreaHeight,PlayAreaDrawXStart,PlayAreaDrawYStart,PlayerX,PlayerY,FallTime]:number TestDraw:vector2 [CurrentShape,LShape,RLShape,IShape,SquareShape,ZShape,SShape,TShape]:array BackgroundBlockColor:vector WelcomeText:string
function void resetScreen()
{
    Screen:egpClear()
}
function void drawShape(Shape:string, Position:vector2, Rotation:number, Color:vector)
{
    switch(Shape)
    {
        case "T",
            Counter = 0
            ColoringPixel = (Position:y()-1)*PlayAreaWidth+Position:x()
            for(I=1,4)
            {
                for(J=1,4)
                {
                    Counter++
                    ColoringPixel = (Position:y()-1) *PlayAreaWidth + ((I-1)*PlayAreaWidth) +Position:x() + J
                    if(TShape[Counter,number] == 1){Screen:egpColor(ColoringPixel,Color)}
                }
            }
    }
}
function void drawPlayArea()
{
    N=1
    #I will make a background for the right side of the screen for a background for the play area.
    Screen:egpBox(N,vec2(256+128,256),vec2(256,512))
    Screen:egpColor(N,vec(32,32,32))
    #The code below draws the play area where the pieces will be drawn.
    N++
    for(I=1, PlayAreaHeight)
    {
        for(J=1,PlayAreaWidth)
        {
            Screen:egpBox(N,vec2(PlayAreaDrawYStart-BlockSize/2+J*BlockSize,PlayAreaDrawXStart-BlockSize/2+I*BlockSize),vec2(BlockSize-2,BlockSize-2))
            #Screen:egpText(N,N:toString(),vec2(PlayAreaDrawYStart-BlockSize/2+J*BlockSize,PlayAreaDrawXStart-BlockSize/2+I*BlockSize))
            Screen:egpColor(N,BackgroundBlockColor)
            N++
        }
    }
    #Screen:egpText(N,WelcomeText,vec2(10,10))
    
}
function number checkFellToBottom()
{
    
}
if(first())
{
    #Store the pieces in a 4x4 array?
    LShape =        array(0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0)
    IShape =        array(1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0)
    RLShape =       array(1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0)
    SquareShape =   array(1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0)
    SShape =        array(0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0)
    ZShape =        array(1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0)
    TShape =        array(0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0)
    
    WelcomeText = "Leghumper's Tetris thingy"
    BlockSize = 25 #pixels
    PlayAreaHeight = 20
    PlayAreaWidth = 10
    #What if we want to align the play area into the middle of the right side of the screen
    #Calculate how many pixels the play area takes up
    #Damnit why do i get motivation to start coding when im shitfaced..
    #Alright lets see
    #512 is the overall width
    #Total pixels the play area will take up in width is PlayAreaWidth*BlockSize
    #So the first block's position should be from the middle of the right side of the screen minus playarea in pixels divided by 2
    PlayAreaDrawXStart = BlockSize/4
    PlayAreaDrawYStart = 256+BlockSize/4
    BackgroundBlockColor = vec(128,128,128)
    
    resetScreen()
    drawPlayArea()
    PlayerY = 1
    PlayerX = 1
    TestDraw = vec2(PlayerX,PlayerY)
    FallTime = 1000
    timer("fallingPieces",FallTime)
}#[
if(clk("randomShapes"))
{
    drawShape("I",TestDraw,1,BackgroundBlockColor)
    TestDraw = vec2(randint(PlayAreaWidth-4),randint(PlayAreaHeight-4))
    #print(TestDraw)
    drawShape("I",TestDraw,1,vec(randint(255),randint(255),randint(255)))
    timer("randomShapes",2000)
}]#
if(clk("fallingPieces"))
{
    drawShape("T",TestDraw,1,BackgroundBlockColor)
    PlayerY = PlayerY + 1
    TestDraw = vec2(PlayerX,PlayerY)
    drawShape("T",TestDraw,1,vec(0,255,0))
    timer("fallingPieces",FallTime)
}
